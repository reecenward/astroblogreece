---
import MarkdownContent from "../components/content";
import Layout from "../layouts/Layout.astro";

export async function getStaticPaths() {
  const response = await fetch(
    `https://strapi-production-71a1.up.railway.app/api/reecenwards`
  );
  const posts = await response.json();
  const paths = posts.data.map(
    (post: { id: number; attributes: { Title: string } }) => {
      return { params: { title: post.attributes.Title } };
    }
  );
  return paths;
}

const { title } = Astro.params;
const response = await fetch(
  `https://strapi-production-71a1.up.railway.app/api/reecenwards?filters[Title][$eq]=${title}&populate=Thumbnail`
);
const postData = await response.json();
const post = postData.data[0];

const formatDate = (dateString: string) => {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
    timeZone: "UTC",
  };
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", options);
};
---

<Layout

title={post.attributes.Title}
	description={post.attributes.Description}
	ogTitle={post.attributes.Title}
    ogDescription={post.attributes.Description}
	ogType="article"
	ogUrl=`https://reecenward.com/${post.attributes.Title}`
	ogImage={post.attributes.Thumbnail.data.attributes.url}
>
  <main > 
      <header>
        <img class="banner"
          style={{ width: "250px" }}
          src={post.attributes.Thumbnail.data.attributes.url}
          alt={post.attributes.Thumbnail.data.attributes.alternativeText}
        />
        <h1 class="text-3xl font-black my-3" >{post.attributes.Title}</h1>
        <p class="bio-p">{post.attributes.Description}</p>
        <hr>
        <div class="blog-title-wrapper">
          <p class="blog-date">
            <time>Posted on {formatDate(post.attributes.publishedAt)}</time>
          </p>
          <p class="blog-date">
            Updated on <time>{formatDate(post.attributes.updatedAt)}</time>
          </p>
        </div>
      </header>
        <br>
        <section>
        {post.attributes.Link && post.attributes.Link.trim() !== "" && ( // Check if Link attribute is not an empty string
          <a class="link" href={post.attributes.Link} target="_blank">{post.attributes.Linkname}</a>
      )}
        </section>
    
        <br>
     
        <article class="prose md:prose-md">
          <MarkdownContent content={post.attributes.Content} />
        </article>

  </main>

  <style>
    .banner {
      width: 100% !important;
      height: 250px !important;
      object-fit: cover;
      border-radius: 5px;
    }
    .blog-title-wrapper {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .blog-date {
      font-size: 15px;
      font-weight: 100;
      margin: 0;
    }
 




    .link{
      width: 100%;
      background-color: var(--background);
      border: #eae4d1 solid 1px;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 40px;
      border-radius: 10px;
      color: var(--text);
      text-decoration: none;
      font-weight: 500;
    }

 
    .link:hover{
      background-color: #eae4d1;
      color:#2a333e;
    }

  </style>
</Layout>
  